#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>

#include <TCanvas.h>
#include <TChain.h>
#include <TObject.h>
#include <TTree.h>
#include <TFile.h>
#include <TH2F.h>
#include <TMath.h>
#include <TColor.h>
#include <TStyle.h>
#include <TString.h>
#include <TROOT.h>
#include <TGraph.h>
#include <TMultiGraph.h>

using namespace std;

Double_t exp(Double_t *x, Double_t *par) {
    return par[0] + par[3]*(TMath::Exp(-(x[0] - par[1]) / par[2]) - 1);
}

//Get number of files
Int_t get_evt_num(TString file_name) {
    Int_t beg = file_name.Last('C');
    Int_t end = file_name.Last('.');
    Int_t len = end-beg-1;
    TString evt_num = file_name(beg+1, len);
    return evt_num.Atoi();
}

//Draw graph function
TGraph* getWaveForm(TString infilename="../data/mm36/oscilloscope/VBB-6.0/C1600000.dat")
{
    ifstream in;
    in.open(infilename.Data());
    
    Double_t time=0, amplitude=0;
    
    TGraph *wave = new TGraph();
    
    Int_t line=0;
    while (1) {
        if (!in.good()) break;
//        if (line == 485050) break;
        if (line == 490000) break;
        in >> time >> amplitude;
        wave->SetPoint(line-465000, time*TMath::Power(10,6), amplitude*TMath::Power(10,3));
        line++;
    }
    
    return wave;
}

//Main function
Bool_t analyze(
               TString file_in_path = "../data/mm36/oscilloscope/VBB-6.0",
               TString file_out_path = "../data/mm36/oscilloscope/results/VBB-6.0",
               Float_t vbb = -0.0
               )
{
    TString file_runlist = file_in_path + "/list.txt";  //Read file list
    ifstream f_runlist(file_runlist.Data());
    if (!f_runlist.is_open()) {
        cout << "runlist file not found! please check list.txt file" << endl;
        return kFALSE;
    }
    string line;
    Int_t n_cnt = 0;
    while (getline(f_runlist, line)) {
        ++n_cnt;
    }
    f_runlist.clear();
    f_runlist.seekg(0, ios::beg);
    const Int_t n_files = n_cnt;
    cout << "number of files found: " << n_files << endl;   //Read number of data file
    
    if (file_out_path.CompareTo("")==0) {
        file_out_path=file_in_path;
    }
    
    cout << "file out path: " << file_out_path.Data() << endl;
    
    TFile *f_out = new TFile(Form("%s/analyze.root", file_out_path.Data()), "RECREATE");
    f_out->cd();
    TString dirname = "vbb_"; dirname += vbb;
    f_out->mkdir(dirname.Data());
    
    TString file_name_event;
    TString fn;
    
    Float_t time = 0;
    Float_t amplitude = 0;
    
    //loop over all files
    for (Int_t i_file=0; i_file<n_files; i_file++) {
        f_out->cd();
        
        f_runlist >> file_name_event;
        fn = file_in_path + "/" + file_name_event;
        
        cout << "'" << fn << "'" << "is opening..." << endl;
        
        TGraph *gr = getWaveForm(fn);
        
        gr->SetMarkerColor(kBlue);
        gr->SetLineColor(kBlue);
        gr->SetMarkerSize(3);
        gr->SetMarkerStyle(7);
        gr->SetTitle("single pixel waveform;Time (#mus);Voltage (mV)");
        
        TF1 *getpedestal = new TF1("getpedestal", "pol0", -4, -3.5);
        gr->Fit(getpedestal, "NOR");
        cout << "Pedestal: " << getpedestal->GetParameter(0) << endl;
        
        TF1 *getVdrop = new TF1("getVdrop", "pol0", 0.5, 1);
        gr->Fit(getVdrop, "NOR");
        cout << "Voltage (after hit): " << getVdrop->GetParameter(0) << endl;
        
        //Load the t, V informatin from gr
        Float_t t[30000];
        Float_t v[30000];
        Double_t xp, yp;
        for (Int_t i=0; i<25000; i++) {
            gr->GetPoint(i, xp, yp);
            t[i] = xp;
            v[i] = yp;
        }
        
        //for add "v[i] > mean" in next while loop
        Double_t mean;
        mean = (getpedestal->GetParameter(0) + getVdrop->GetParameter(0)) / 2;
        
        //Get Hit time
        Int_t i=0;
        while(1) {
            if ((v[i] - v[i+70] > 20) && (v[i] > mean) && (v[i] < getpedestal->GetParameter(0))) {
                //           cout << mean << endl;
                //           cout << v[i] << endl;
                //           cout << t[i] << endl;
                break;
            }
            if (i > 250000) break;
            i++;
        }
        
        TF1 *fexpo = new TF1("fexpo", exp, t[i], t[i+600], 4);
        fexpo->SetParameter(0, getpedestal->GetParameter(0));
        fexpo->SetParameter(1, t[i]);
        fexpo->SetParameter(2, 0.05);
        fexpo->SetParameter(3, getpedestal->GetParameter(0) - getVdrop->GetParameter(0));
        fexpo->SetParName(0, "Pedestal");
        fexpo->SetParName(1, "Hit time");
        fexpo->SetParName(2, "Rise time");
        fexpo->SetParName(3, "Signal");
        
        TF1 *ped = new TF1("ped", "pol0", t[i-600], t[i]);
        ped->SetParameter(0, getpedestal->GetParameter(0));
        ped->SetParLimits(0, 730, 760);
        
        gr->Fit(fexpo, "R");
        gr->Fit(ped, "R+");
//        gr->GetXaxis()->SetRangeUser(t[i-600], t[i+600]);
        
        f_out->cd(dirname.Data());
        gr->Write();
        delete gr;
    }
    
    f_out->cd();
    f_out->Close();
    
    return kTRUE;
}

